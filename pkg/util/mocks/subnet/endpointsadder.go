// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/ARO-RP/pkg/util/subnet (interfaces: EndpointsAdder)

// Package mock_subnet is a generated GoMock package.
package mock_subnet

import (
	reflect "reflect"

	network "github.com/Azure/azure-sdk-for-go/services/network/mgmt/2020-08-01/network"
	gomock "github.com/golang/mock/gomock"
)

// MockEndpointsAdder is a mock of EndpointsAdder interface.
type MockEndpointsAdder struct {
	ctrl     *gomock.Controller
	recorder *MockEndpointsAdderMockRecorder
}

// MockEndpointsAdderMockRecorder is the mock recorder for MockEndpointsAdder.
type MockEndpointsAdderMockRecorder struct {
	mock *MockEndpointsAdder
}

// NewMockEndpointsAdder creates a new mock instance.
func NewMockEndpointsAdder(ctrl *gomock.Controller) *MockEndpointsAdder {
	mock := &MockEndpointsAdder{ctrl: ctrl}
	mock.recorder = &MockEndpointsAdderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEndpointsAdder) EXPECT() *MockEndpointsAdderMockRecorder {
	return m.recorder
}

// AddEndpointsToSubnets mocks base method.
func (m *MockEndpointsAdder) AddEndpointsToSubnets(arg0 []string, arg1 []*network.Subnet) []*network.Subnet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEndpointsToSubnets", arg0, arg1)
	ret0, _ := ret[0].([]*network.Subnet)
	return ret0
}

// AddEndpointsToSubnets indicates an expected call of AddEndpointsToSubnets.
func (mr *MockEndpointsAdderMockRecorder) AddEndpointsToSubnets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEndpointsToSubnets", reflect.TypeOf((*MockEndpointsAdder)(nil).AddEndpointsToSubnets), arg0, arg1)
}
